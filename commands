
sudo docker run --name website -v $(pwd):/usr/share/nginx/html:ro -d -p 8080:80 nginx - mount host web files to nginx file & override default d=niginx display content

sudo docker exec -it website bash - This is used to cd into the bash directory of a specified container. In out case, website is the name of the container and can be name of anny oter containery

sudo docker run --name website_copy --volumes-from website -d -p 8081:80 nginx  - Here we ran a new container names website_copy and copied volumes from a exsiting container called website and map a new localhost port 8081 to nginx image' port of 80. So we invaraible created a copy of the existing nginx contianer running on port 8080 but now this copy runs on port 8081 since port 8080 is already in use by the container named website

sudo docker build --tag/-t website:latest . - After writing our Dockerfile, we can run a simple command with Docker build to build a docker image. We can specify variable number of arguments after the docker build command. To see the arguments that can be run after docker build, you can run docker build --help. The (.) at the end of the build command specifies the location of the Dockerfile. This could also be a directory path, we are in the same directory as our Dockerfile that is why we used . here. 

sudo docker run --name website-v1 -d -p 8081:80 patrickwebsite:v1 - Here we started running a container based on the image with tag v1, essentially version 1. This is how we apply versionnig to our images using tags. This helps us to properly tag various image releases as versions and in situations when things don't work well, we can rerun a contianer from an image (version) when things was working well. 
